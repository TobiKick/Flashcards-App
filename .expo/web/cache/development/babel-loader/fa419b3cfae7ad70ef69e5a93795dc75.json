{"ast":null,"code":"'use strict';\n\nimport { NativeModules, DeviceEventEmitter } from 'react-native';\nconst RNAdMobRewarded = NativeModules.RNAdMobRewarded;\nconst eventHandlers = {\n  rewardedVideoDidRewardUser: new Map(),\n  rewardedVideoDidLoad: new Map(),\n  rewardedVideoDidFailToLoad: new Map(),\n  rewardedVideoDidOpen: new Map(),\n  rewardedVideoDidClose: new Map(),\n  rewardedVideoWillLeaveApplication: new Map()\n};\n\nconst addEventListener = (type, handler) => {\n  switch (type) {\n    case 'rewardedVideoDidRewardUser':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, (type, amount) => {\n        handler(type, amount);\n      }));\n      break;\n\n    case 'rewardedVideoDidLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'rewardedVideoDidFailToLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, error => {\n        handler(error);\n      }));\n      break;\n\n    case 'rewardedVideoDidOpen':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'rewardedVideoDidClose':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'rewardedVideoWillLeaveApplication':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    default:\n      console.log(`Event with type ${type} does not exist.`);\n  }\n};\n\nconst removeEventListener = (type, handler) => {\n  if (!eventHandlers[type].has(handler)) {\n    return;\n  }\n\n  eventHandlers[type].get(handler).remove();\n  eventHandlers[type].delete(handler);\n};\n\nconst removeAllListeners = () => {\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidRewardUser');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidLoad');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidFailToLoad');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidOpen');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidClose');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoWillLeaveApplication');\n};\n\nmodule.exports = { ...RNAdMobRewarded,\n  requestAd: (cb = () => {}) => RNAdMobRewarded.requestAd(cb),\n  // requestAd callback is optional\n  showAd: (cb = () => {}) => RNAdMobRewarded.showAd(cb),\n  // showAd callback is optional\n  addEventListener,\n  removeEventListener,\n  removeAllListeners\n};","map":{"version":3,"sources":["C:/Users/Tobias/Projects/react-flashcards-app/node_modules/expo/src/admob/RNAdMobRewarded.js"],"names":["NativeModules","DeviceEventEmitter","RNAdMobRewarded","eventHandlers","rewardedVideoDidRewardUser","Map","rewardedVideoDidLoad","rewardedVideoDidFailToLoad","rewardedVideoDidOpen","rewardedVideoDidClose","rewardedVideoWillLeaveApplication","addEventListener","type","handler","set","addListener","amount","error","console","log","removeEventListener","has","get","remove","delete","removeAllListeners","module","exports","requestAd","cb","showAd"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeModules, DeviceEventEmitter } from 'react-native';\n\nconst RNAdMobRewarded = NativeModules.RNAdMobRewarded;\n\nconst eventHandlers = {\n  rewardedVideoDidRewardUser: new Map(),\n  rewardedVideoDidLoad: new Map(),\n  rewardedVideoDidFailToLoad: new Map(),\n  rewardedVideoDidOpen: new Map(),\n  rewardedVideoDidClose: new Map(),\n  rewardedVideoWillLeaveApplication: new Map(),\n};\n\nconst addEventListener = (type, handler) => {\n  switch (type) {\n    case 'rewardedVideoDidRewardUser':\n      eventHandlers[type].set(\n        handler,\n        DeviceEventEmitter.addListener(type, (type, amount) => {\n          handler(type, amount);\n        })\n      );\n      break;\n    case 'rewardedVideoDidLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'rewardedVideoDidFailToLoad':\n      eventHandlers[type].set(\n        handler,\n        DeviceEventEmitter.addListener(type, error => {\n          handler(error);\n        })\n      );\n      break;\n    case 'rewardedVideoDidOpen':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'rewardedVideoDidClose':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'rewardedVideoWillLeaveApplication':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    default:\n      console.log(`Event with type ${type} does not exist.`);\n  }\n};\n\nconst removeEventListener = (type, handler) => {\n  if (!eventHandlers[type].has(handler)) {\n    return;\n  }\n  eventHandlers[type].get(handler).remove();\n  eventHandlers[type].delete(handler);\n};\n\nconst removeAllListeners = () => {\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidRewardUser');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidLoad');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidFailToLoad');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidOpen');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoDidClose');\n  DeviceEventEmitter.removeAllListeners('rewardedVideoWillLeaveApplication');\n};\n\nmodule.exports = {\n  ...RNAdMobRewarded,\n  requestAd: (cb = () => {}) => RNAdMobRewarded.requestAd(cb), // requestAd callback is optional\n  showAd: (cb = () => {}) => RNAdMobRewarded.showAd(cb), // showAd callback is optional\n  addEventListener,\n  removeEventListener,\n  removeAllListeners,\n};\n"]},"metadata":{},"sourceType":"module"}