{"ast":null,"code":"'use strict';\n\nimport { NativeModules, DeviceEventEmitter } from 'react-native';\nconst RNAdMobInterstitial = NativeModules.RNAdMobInterstitial;\nconst eventHandlers = {\n  interstitialDidLoad: new Map(),\n  interstitialDidFailToLoad: new Map(),\n  interstitialDidOpen: new Map(),\n  interstitialDidClose: new Map(),\n  interstitialWillLeaveApplication: new Map()\n};\n\nconst addEventListener = (type, handler) => {\n  switch (type) {\n    case 'interstitialDidLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'interstitialDidFailToLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, error => {\n        handler(error);\n      }));\n      break;\n\n    case 'interstitialDidOpen':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'interstitialDidClose':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    case 'interstitialWillLeaveApplication':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n\n    default:\n      console.log(`Event with type ${type} does not exist.`);\n  }\n};\n\nconst removeEventListener = (type, handler) => {\n  if (!eventHandlers[type].has(handler)) {\n    return;\n  }\n\n  eventHandlers[type].get(handler).remove();\n  eventHandlers[type].delete(handler);\n};\n\nconst removeAllListeners = () => {\n  DeviceEventEmitter.removeAllListeners('interstitialDidLoad');\n  DeviceEventEmitter.removeAllListeners('interstitialDidFailToLoad');\n  DeviceEventEmitter.removeAllListeners('interstitialDidOpen');\n  DeviceEventEmitter.removeAllListeners('interstitialDidClose');\n  DeviceEventEmitter.removeAllListeners('interstitialWIllLeaveApplication');\n};\n\nmodule.exports = { ...RNAdMobInterstitial,\n  requestAd: (cb = () => {}) => RNAdMobInterstitial.requestAd(cb),\n  // requestAd callback is optional\n  showAd: (cb = () => {}) => RNAdMobInterstitial.showAd(cb),\n  // showAd callback is optional\n  addEventListener,\n  removeEventListener,\n  removeAllListeners,\n  setAdUnitId: id => {\n    RNAdMobInterstitial.setAdUnitID(id);\n    console.warn(`setAdUnitId will be deprecated soon. Please use setAdUnitID instead.`);\n  }\n};","map":{"version":3,"sources":["C:/Users/Tobias/Projects/react-flashcards-app/node_modules/expo/src/admob/RNAdMobInterstitial.js"],"names":["NativeModules","DeviceEventEmitter","RNAdMobInterstitial","eventHandlers","interstitialDidLoad","Map","interstitialDidFailToLoad","interstitialDidOpen","interstitialDidClose","interstitialWillLeaveApplication","addEventListener","type","handler","set","addListener","error","console","log","removeEventListener","has","get","remove","delete","removeAllListeners","module","exports","requestAd","cb","showAd","setAdUnitId","id","setAdUnitID","warn"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeModules, DeviceEventEmitter } from 'react-native';\n\nconst RNAdMobInterstitial = NativeModules.RNAdMobInterstitial;\n\nconst eventHandlers = {\n  interstitialDidLoad: new Map(),\n  interstitialDidFailToLoad: new Map(),\n  interstitialDidOpen: new Map(),\n  interstitialDidClose: new Map(),\n  interstitialWillLeaveApplication: new Map(),\n};\n\nconst addEventListener = (type, handler) => {\n  switch (type) {\n    case 'interstitialDidLoad':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'interstitialDidFailToLoad':\n      eventHandlers[type].set(\n        handler,\n        DeviceEventEmitter.addListener(type, error => {\n          handler(error);\n        })\n      );\n      break;\n    case 'interstitialDidOpen':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'interstitialDidClose':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    case 'interstitialWillLeaveApplication':\n      eventHandlers[type].set(handler, DeviceEventEmitter.addListener(type, handler));\n      break;\n    default:\n      console.log(`Event with type ${type} does not exist.`);\n  }\n};\n\nconst removeEventListener = (type, handler) => {\n  if (!eventHandlers[type].has(handler)) {\n    return;\n  }\n  eventHandlers[type].get(handler).remove();\n  eventHandlers[type].delete(handler);\n};\n\nconst removeAllListeners = () => {\n  DeviceEventEmitter.removeAllListeners('interstitialDidLoad');\n  DeviceEventEmitter.removeAllListeners('interstitialDidFailToLoad');\n  DeviceEventEmitter.removeAllListeners('interstitialDidOpen');\n  DeviceEventEmitter.removeAllListeners('interstitialDidClose');\n  DeviceEventEmitter.removeAllListeners('interstitialWIllLeaveApplication');\n};\n\nmodule.exports = {\n  ...RNAdMobInterstitial,\n  requestAd: (cb = () => {}) => RNAdMobInterstitial.requestAd(cb), // requestAd callback is optional\n  showAd: (cb = () => {}) => RNAdMobInterstitial.showAd(cb), // showAd callback is optional\n  addEventListener,\n  removeEventListener,\n  removeAllListeners,\n  setAdUnitId: id => {\n    RNAdMobInterstitial.setAdUnitID(id);\n    console.warn(`setAdUnitId will be deprecated soon. Please use setAdUnitID instead.`);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}